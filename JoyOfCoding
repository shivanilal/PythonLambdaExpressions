pascals = lambda r,c: 1 if r==c or c==1 else pascals(r-1,c-1)+pascals(r-1,c)


fib = lambda n: 1 if n<=2 else fib(n-1)+fib(n-2)


steps = lambda n: n if n < 4 else steps(n-1)+steps(n-2)


repeat= lambda f, n: (lambda x: x) if n==0 else lambda x: f(repeat(f, n-1)(x))


successor = lambda x: x+1


add = lambda x,y: repeat(successor,y)(x)


mult = lambda x,y: repeat(repeat(successor,x),y-1)(x)

mult = lambda x,y: repeat(lambda z: add(z,x), y-1)(x)

mult = lambda x,y: repeat(lambda z: add(z,x), y)(0)


exp = lambda x,y: repeat(lambda z: mult(x,z), y)(1)


abs = lambda a: a if a>0 else -1*a


midpoint = lambda s,e: (s+e)/2


limit = lambda f,s,e,t: f((e+s)/2) if abs(f((s+e)/2)-f(s)<=t) else limit(f,(e+s)/2,e,t)

limit = lambda f,s,e,t: f(midpoint(s,e)) if abs(f(midpoint(s,e))-f(s))<=t else limit(f, midpoint(s,e),e,t)

limitList = lambda f,s,e,t: limList.append(f(midpoint(s,e))) if abs(f(midpoint(s,e))-f(s))<=t else limList.append(limit(f, midpoint(s,e),e,t))




derivative = lambda f, x: limit(lambda h: (f(x+h)-f(x))/(h), 1, 0, 0.000000001)



sum = lambda f,a,b,i: 0  if (a+i>b) else sum(f,a+i,b,i) + f(a)
sum = lambda f,a,b,i: 0  if (a>b) else sum(f,a+i,b,i) + f(a)



integral = lambda f,a,b: limit(lambda i: sum(f, a, b, i) * i, 1, 0, 0.001)


addPoly = lambda p,q: p+q if len(q) * len(p) == 0 else [p[0]+q[0]]+addPoly(p[1:], q[1:])

distribute = lambda a,p: [] if (len(p) == 0) else distribute(a,p[1:]) + [p[0]*a]


multPoly = lambda p,q: [] if (len(p) * len(q) == 0) else addPoly(distribute(q[0], p), [0] + multPoly(p, q[1:]))

evalPoly = lambda p: lambda x: 0 if (len(p) == 0) else p[0] + evalPoly(distribute(x,p[1:]))(x)

polyToString = lambda p: "0" if (len(p) == 0) else str(p[(len(p)-1)]) + " x^" + str(len(p)-1) + " + "+ polyToString(p[0:(len(p)-1)])


